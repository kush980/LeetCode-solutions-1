https://leetcode.com/problems/sliding-window-median


//time-O(NK)
//space-O(K)

class Solution {
public:
    vector<double> medianSlidingWindow(vector<int>& nums, int k) {
        if(nums.size()==0 || nums.size()<k) 
            return vector<double>{} ;
        vector<int> s ;
        vector<double> ans ;
        int n=nums.size() ;
        for(int i=0;i<k;i++)
        {
            auto position=lower_bound(s.begin(),s.end(),nums[i]) ;
            s.insert(position,nums[i]) ;
        }
        for(int i=k;i<=n;i++)
        {
            if(k%2!=0)
            {
                int med=s[k/2] ;
                ans.push_back(med) ;
            //  to slide the window we remove the first(i-k th) element
                auto position=lower_bound(s.begin(),s.end(),nums[i-k]);
                s.erase(position) ;
            }
            else
            {
                double med1=s[k/2] ;
                double med2=s[(k/2)-1] ;
                double final_med=(med1+med2)/2.0 ;
                ans.push_back(final_med) ;
            //  to slide the window we remove the first(i-k th) element
                auto position=lower_bound(s.begin(),s.end(),nums[i-k]);
                s.erase(position) ; 
            }
            // to slide the window insert the new element 
            if(i!=n)
                s.insert(lower_bound(s.begin(),s.end(),nums[i]),nums[i]) ;
        }
        return ans ;
    }
};
